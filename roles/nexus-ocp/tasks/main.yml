---
- fail:
    msg: "Must set spec.expose.uri when spec.expose.kind == 'Ingress' and spec.expose.ssl == True"
  when:
    - _nexus_ssl
    - _nexus_expose_method == 'Ingress'
    - _nexus_expose_uri == ''

# Tasks file for Nexus
- name: Set OpenShift objects for Nexus to {{ _nexus_state }}
  k8s:
    state: "{{ _nexus_state }}"
    merge_type:
    - strategic-merge
    - merge
    definition: "{{ lookup('template', item) | from_yaml }}"
  loop:
  - service_account.yml.j2
  - service.yml.j2
  - config_map.yml.j2
  - deployment.yml.j2

- name: Set Nexus Ingress/Route to {{ _nexus_state }}
  when: item != 'None'
  k8s:
    state: "{{ _nexus_state }}"
    merge_type:
    - strategic-merge
    - merge
    definition: "{{ lookup('template', item + '.yml.j2') | from_yaml }}"
  loop:
  - '{{ _nexus_expose_method }}'

- name: Set Docker Route to {{ _nexus_state }}
  when: '{{ _nexus_docker }}'
  k8s:
    state: "{{ _nexus_state }}"
    merge_type:
    - strategic-merge
    - merge
    definition: "{{ lookup('template', 'docker_route.yml.j2') | from_yaml }}"

- name: Set PersistentVolumeClaim for Nexus to {{ _nexus_state }}
  when: _nexus_persistent|bool
  k8s:
    state: "{{ _nexus_state }}"
    merge_type:
    - strategic-merge
    - merge
    definition: "{{ lookup('template', 'persistent_volume_claim.yml.j2') | from_yaml }}"

- name: Wait until application is available
  when:
  - _nexus_state == "present"
  - _nexus_wait_for_init|bool
  k8s_facts:
    api_version: apps/v1
    kind: Deployment
    name: "{{ _nexus_name }}"
    namespace: "{{ _nexus_namespace }}"
  register: r_deployment
  until:
  - r_deployment.resources[0].status.availableReplicas is defined
  - r_deployment.resources[0].status.availableReplicas == 1
  retries: 50
  delay: 10
  ignore_errors: yes

- name: Check for admin credential secret
  k8s_info:
    namespace: "{{ _nexus_namespace }}"
    kind: Secret
    name: "{{ _nexus_name }}-admin-credentials"
  register: nexus_admin_credentials

- name: Verify saved credentials
  block:
  - set_fact:
      nexus_admin_password: "{{ nexus_admin_credentials.resources[0].data.password | b64decode }}"

  - name: Check nexus status
    uri:
      url: "http://{{ _nexus_name }}.{{ _nexus_namespace }}.svc:8081/service/rest/v1/status/check"
      user: admin
      password: "{{ nexus_admin_password }}"
      force_basic_auth: yes
    ignore_errors: yes
    register: nexus_status_check_admin_credentials
  when: nexus_admin_credentials.resources

- name: Get the admin password from the nexus pod
  block:
    - name: Get the nexus pod
      k8s_info:
        namespace: "{{ _nexus_namespace }}"
        kind: Pod
        label_selectors:
        - app = {{ _nexus_name }}
      register: nexus_pod
    - set_fact:
        nexus_pod_name: '{{ nexus_pod.resources[0].metadata.name }}'

    - name: Get admin.password file
      community.kubernetes.k8s_exec:
        namespace: "{{ _nexus_namespace }}"
        pod: '{{ nexus_pod_name }}'
        container: nexus-server
        command: cat /nexus-data/admin.password
      register: admin_password_file

    - set_fact:
        default_password: '{{ admin_password_file.stdout }}'

    - name: Generate and save credentials secret
      block:
      - set_fact:
          nexus_admin_password: "{{ lookup('password', '/dev/null length=15 chars=ascii_letters') }}"
      - name: Create nexus-admin-credentials Secret
        k8s:
          definition: "{{ lookup('template', 'secret.yml.j2') | from_yaml }}"
      when: not nexus_admin_credentials.resources

  when: (not nexus_admin_credentials.resources) or (nexus_status_check_admin_credentials.status != 200)

- name: Add script to configure server
  shell: >-
    devsecops-api nexus add-script
    http://{{ _nexus_name }}.{{ _nexus_namespace }}.svc:8081
    --login-username admin --login-password {{ default_password | default(nexus_admin_password)  }}
    --script-name 'rut-auth' --script-content "import groovy.json.JsonOutput; import org.sonatype.nexus.capability.CapabilityReference; import org.sonatype.nexus.capability.CapabilityType; import org.sonatype.nexus.internal.capability.DefaultCapabilityReference; import org.sonatype.nexus.internal.capability.DefaultCapabilityRegistry; security.securitySystem.changePassword('admin', '{{ nexus_admin_password }}'); security.setAnonymousAccess({{ _nexus_anonymous|lower }}); returnValue = JsonOutput.toJson([result : 'Did NOT add Rut Auth']); def capabilityRegistry = container.lookup(DefaultCapabilityRegistry.class.getName()); def capabilityType = CapabilityType.capabilityType('rutauth'); def capabilityProps = ['httpHeader': 'X-Forwarded-User']; def capabilityNotes = 'Configured by the nexus-operator'; DefaultCapabilityReference existing = capabilityRegistry.all.find { CapabilityReference capabilityReference -> capabilityReference.context().descriptor().type() == capabilityType}; if (!existing) { log.info('Rut Auth capability created as: {}', capabilityRegistry.add(capabilityType, true, capabilityNotes, capabilityProps).toString()); returnValue = JsonOutput.toJson([result : 'Successfully added Rut Auth!']) }; return returnValue"
    --script-type 'groovy'
  ignore_errors: yes

- name: Run script to configure server
  shell: >-
    devsecops-api nexus run-script
    http://{{ _nexus_name }}.{{ _nexus_namespace }}.svc:8081
    --login-username admin --login-password {{ default_password | default(nexus_admin_password) }}
    --script-name 'rut-auth'

- name: Add user {{ item }}
  when: _nexus_oauth
  shell: >-
    devsecops-api nexus add-user
    http://{{ _nexus_name }}.{{ _nexus_namespace }}.svc:8081
    --login-username admin --login-password {{ nexus_admin_password }}
    --usernames {{ item }}
    --passwords {{ lookup('password', '/dev/null length=15 chars=ascii_letters') }}
  loop: '{{ _nexus_admin_users }}'
