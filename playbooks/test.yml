---
# Persistent nexus deployment playbook.

# The following variables come from the ansible-operator
# - ansible_operator_meta.namespace
# - ansible_operator_meta.name (from the name of the CR)

- hosts: localhost
  gather_facts: no
  tasks:
  - name: Get the nexus pod
    community.kubernetes.k8s_info:
      kubeconfig: "/Users/akrohg/.kube/config"
      namespace: nexus-operator-system
      kind: Pod
      label_selectors:
      - app = nexus-sample
    register: nexus_pod

  - set_fact:
      nexus_pod_name: '{{ nexus_pod.resources[0].metadata.name }}'

  - name: Get admin.password file
    community.kubernetes.k8s_exec:
      kubeconfig: "/Users/akrohg/.kube/config"
      namespace: nexus-operator-system
      pod: '{{ nexus_pod_name }}'
      container: nexus-server
      command: cat /nexus-data/admin.password
    register: admin_password_file
    ignore_errors: True

  - name: End here when server has already been configured
    meta: end_play
    when: admin_password_file.stderr_lines|length > 0

  - set_fact:
      admin_password: '{{ admin_password_file.stdout }}'

  - name: Get nexus.properties
    community.kubernetes.k8s_exec:
      kubeconfig: "/Users/akrohg/.kube/config"
      namespace: nexus-operator-system
      pod: '{{ nexus_pod_name }}'
      container: nexus-server
      command: cat /nexus-data/etc/nexus.properties
    register: properties

  - name: Add script creation to nexus.properties
    community.kubernetes.k8s_exec:
      kubeconfig: "/Users/akrohg/.kube/config"
      namespace: nexus-operator-system
      pod: '{{ nexus_pod_name }}'
      container: nexus-server
      command: bash -c "echo nexus.scripts.allowCreation=true >> /nexus-data/etc/nexus.properties && exec /opt/sonatype/nexus/bin/nexus stop"
    when: '"nexus.scripts.allowCreation=true" not in properties.stdout'

  - name: Restart nexus
    community.kubernetes.k8s:
      namespace: nexus-operator-system
      kind: Pod
      name: '{{ nexus_pod_name }}'
      state: absent

  - name: Wait for Nexus to respond to requests
    uri:
      url: 'https://nexus-sample-nexus-operator-system.apps.cluster-a755.a755.example.opentlc.com'
      return_content: yes
      validate_certs: no
    register: nexus_endpoint
    until: nexus_endpoint.status == 200
    retries: 20
    delay: 30

  - name: Add script to enable Rut Auth
    shell: >-
      devsecops-api nexus add-script
      https://nexus-sample-nexus-operator-system.apps.cluster-a755.a755.example.opentlc.com
      --login-username admin --login-password {{ admin_password }}
      --script-name 'rut-auth' --script-content "import groovy.json.JsonOutput; import org.sonatype.nexus.capability.CapabilityReference; import org.sonatype.nexus.capability.CapabilityType; import org.sonatype.nexus.internal.capability.DefaultCapabilityReference; import org.sonatype.nexus.internal.capability.DefaultCapabilityRegistry; returnValue = JsonOutput.toJson([result : 'Did NOT add Rut Auth']); def capabilityRegistry = container.lookup(DefaultCapabilityRegistry.class.getName()); def capabilityType = CapabilityType.capabilityType('rutauth'); def capabilityProps = ['httpHeader': 'X-Forwarded-User']; def capabilityNotes = 'Configured by the nexus-operator'; DefaultCapabilityReference existing = capabilityRegistry.all.find { CapabilityReference capabilityReference -> capabilityReference.context().descriptor().type() == capabilityType}; if (!existing) { log.info('Rut Auth capability created as: {}', capabilityRegistry.add(capabilityType, true, capabilityNotes, capabilityProps).toString()); returnValue = JsonOutput.toJson([result : 'Successfully added Rut Auth!']) }; return returnValue"
      --script-type 'groovy'

  - name: Run script to enable Rut Auth
    shell: >-
      devsecops-api nexus run-script
      https://nexus-sample-nexus-operator-system.apps.cluster-a755.a755.example.opentlc.com
      --login-username admin --login-password {{ admin_password }}
      --script-name 'rut-auth'


